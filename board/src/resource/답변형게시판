# 답변형 게시판 
1. 주요기능 
	1) 전체글 리스트 
		block단위 페이징 처리 
			- 한번에 보일 데이터 건수 설정 3/5/10/20 
			  [1][2][3][4][5]>>
			<<[6][7][8][9][10]>>
		검색 처리 
		계층형 답글 달기 처리 
	2) 글등록 
		첨부파일 처리(다중파일) 
	3) 상세화면
		수정 
		삭제 
		파일다운로드
		답글 
2. 개발 순서 
	1) DB 설게 및 테이블 구성 
		board: 번호, 상위번호, 제목, 작성자, 등록일, 수정일, 조회수, 내용 
				no  refno  subject writer regdte uptdte readcnt content 
		boardfile : 번호, 파일명, 경로명, 내용, 생성일 
					no  fname   pathname content credte 
		board_seq(sequence만들기)
		
	2) vo 작성 
		리스트/입력 처리 vo 
		조회처리 및 페이지처리 관려 vo 
		첨부파일 vo 
	3) 기본 조회 리스트 작성하기 
		select * from board 
		where subject like '%%' 
		and writer '%%' 
		dao 
		mapper 
		service 
		controller 
		jsp(화면출력) 
	4) 등록처리	
		sql : insert into board values()
			  insert into boardFile values() 
		dao 
		mapper
		service
			첨부파일 로직 처리 
		controlller
		jsp (초기화면 구성) 
			첨부파일 위한 form 속성 enctype을 설정 
		vo multipartfile 객체 활용처리 
		container에 파일 업로드 등록 
	5) 상세화면 처리 
		- 상세화면보기 
		- 수정 
		- 삭제 
		- 답글 
			답글 처리 순간 데이터 구조가 계층형 
	6) 계층형 리스트 처리하기 
		- 계층형 sql 작성 
		- 조회 vo 할당(BoardSch 추가) 
			전체글수
			페이지당 보일 데이터 건수 
			페이지수 
			시작번호 
			마지막 번호 
		- service 단에서 business 로직 처리 
		- 계층적 리스트 및 페이징 처리 
			페이지당 데이터 건수 select[3/5/10/20]
			클릭한 현재 페이지 번호 [1][2][3][4][5]
			페이지블럭 처리 
		
# DB 설계 및 VO 만들기 
	1) DB 설게 및 테이블 구성 
		board: 번호, 상위번호, 제목, 작성자, 등록일, 수정일, 조회수, 내용 
				no  refno  subject writer regdte uptdte readcnt content 
		boardfile : 번호, 파일명, 경로명, 내용, 생성일 
					no  fname   pathname content credte 
		board_seq(sequence만들기)
		
	2) vo 작성 
		리스트/입력 처리 vo (board.z01_vo.Board) 
		조회처리 및 페이지처리 관려 vo 
		첨부파일 vo (board.z01_vo.BoardFile)
	
# 기본 조회 리스트 작성하기
	1)sql 
		select * from board 
		where subject like '%%' 
		and writer '%%' 
		order by no desc 
	2) dao 	
		public ArrayList<Board> boardList(Board sch); 
	3) mapper 
	4) service 
		A01_BoardService 
	5) controller 
		modelattribute 명 sch 
		model명 boadList 
	6) jsp(화면출력) 	
	

# 기본 정보 등록 하기 
	1) list 화면에서 등록버튼 클릭 
		/board.do?method=insForm으로 등록 화면 이동 
	2) controller 등록화면 선언 
	3) 등록 화면 a02_boardInsertjsp 
		form 화면 구성 .. action /board.do?method=insert 
		상위글번호(0,hidden), 글 제목, 작성자, 내용, 첨부파일 
	4) 등록 sql 
		INSERT INTO board values(board_seq.nextval,0,'첫번째 글','내용','홍길동',0,sysdate,sysdate)
	5) dao 
		public void insertBoard(Board insert); 
	6) mapper.xml 작성 
	7) service 
	8) controller 	
		등록 service 호출 
	9) 화면 등록 완료 처리 메시지 출력 

# 파일 업로드 처리 
1. 다중 파일 업로드를 위한 화면 UI 구성(view) 
	<input type="file" name="report"/> 
2. form 객체의 속성 추가 처리 
	<form enctype="multipart/form-data" method="post" 
3. container에 파일 업로드 view bean 추가 처리 
	org.springframework.web.multipart.commons.CommonsMultipartResolver 
4. VO에서 report라는 프로퍼티로 네트워크상(client ==> server) 전송 가능하게 해주는 
	MultipartFile 객체를 속성 선언 
	private MultipartFile[] report; 
5. controller에서 파일이 전송되었는지 확인 
	report.getoriginalFilename();
6. service단에서 받은 MultipartFile을 File객체로 변환해서 
	1) 특정 위치에 저장처리 
		eclipse tomcat 웹 서비스 사용하기 때문 
		- 임시 폴드: 우선 저장(tmpUpload) - info에 위치 설정 
		- 파일 다운로드할 폴더(upload): 임시 폴더에 있는 파일 추후 다운로드할 폴더에 복사 처리 
							- info에 위치 설정. 절대위치 지정.  /Users/ichaeeun/git/board/board/WebContent/z01_upload
		- 다운로드 업로드 폴더 위치 지정
		- 임시폴더에 있는 모든 파일 삭제 (예외방지) 
		- MultipartFile 객체(메모리로 파일정보) 
			==> File 변환(메모리+하드웨어적으로 특정 위치에 파일을 저장) 
			transferTo() 메서드 사용 
		- 임시파일 ==> 업로드할 위치로 복사 
			파일카피 정책으로는 기존파일이 있으면 덮어쓰기 처리 .. 
			
	2) DB에 해당 파일 정보를 저장 처리 
		(상세화면에서 다운로드 처리를 위해 파일 정보 저장) 
		- db 구조 만들기 
			boardfile : 번호, 파일명, 경로명, 내용, 생성일 
					no  fname   pathname content credte 
		- VO 만들기	vo Boardfile 
			
		- sql 
			insert into boardfile(board_seq.currval, #{fname},#{pathname},
						#{content},sysdate) 
			board_seq.currval : 등록하는 main board테이블의 no와 동일하게 처리 
		- dao 
		- 공통 vo 마이바티즈 공통파일 등록, mapper.xml sql 등록 처리 
		- service 단에서 호출 처리 
# 상세화면 처리 
1. 리스트 화면에서 특정한 row 클릭, no와 함께 
	controller 상세화면 처리 
2. sql 작성 
	select * from board where no = #{no}
3. dao 작성 
4. XXXmapper.xml 
5. service 호출 
6. controller 
	model 처리 
	상세 화면 호출 
7. 상세화면에 출력 리스트 	
		
# 첨부파일 리스트 및 다운로드 
1. sql 작성 select * from boardfile where no = #{no}
2. vo확인 
3. dao public ArrayList<BoardFile> getBoardFile(int no); 
4. mapper처리 
5. Board VO 객체에 첨부파일을 처리할 수 있는 추가 등록 
	private ArrayList<BoardFile> fileInfo; 
6. service에서 Board VO에 할당 
7. jsp에서 처리 

# 조회수 count up 처리 
1. sql 
	update board
		set readcnt = readcnt+1
		where no =#{no}
2. dao public void updateBaord(int no);
3. mapper
4. service단에서 호출 
	dao.updateBoard(no); 
		
# 파일 다운로드 
1. 리스트 처리 
	board의 FileInfo로 리스트 처리 
2. 파일다운로드작성 및 container에 view 등록 
3. 파일명을 모델로 파일다운로드 controller 생성 
	- 요청값으로 파일명을 전송 
	- model값 파일을 설정 => downloadFile 로 설정해야 지정된 
		파일명을 viewer에서 인식 
	- return 으로 컨테이너에서 선언한 bean id 를 호출 
		downloadviewer 
	
	
4. 상세화면 리스트에서 함수로 파일 다운 호출 
	다운로드 controller 호출 
5. 해당 파일 클릭 시, 다운로드 처리 

# 파일 다운로드 viewer 작성 
1. api에서 지원되는 부분에서 model데이터로 특정한 파일을 지정해야 하기 때문에 
	사용자 정의로 만들어야 한다. 
	
2. 사용자정의 viewer 작성 순서 
	- 1. 상속 AbstractView 선언 
		1) overriding 메서드 재정의 
			- renderMergeOutputModel
				매개변수 
				Map<String,Object> model : 다운로드할 파일명을 할당 처리 
				HttpServletRequest request,
				HttpServletResponse response 
	- 2. 다운로드 처리 
		1) upload된 파일 가져오기 (서버가 가지고 있는 파일) 
			- 현재 viewer를 호출 시, 사용되는 model 객체 가져오기 
			- File 객체 생성 
		2) 모델과 함께 있는 File객체 가져오기(서버가 가지고 있는 파일) 
		3) 반응 객체(response)로 전달 처리(클라이언트에 파일) 
			- 전체 파일명 
			- 파일명 
			- 파일의 길이 
			- setContentType 설정 : application/download;charset-utf-8
			- setContentLength로 파일의 길이 설정 
			- 한글명된 파일은 Encoding처리 
			- 파일을 response에 탑재를 위한 header부분 설정 
				Content-Disposition 으로 attachment 로 파일 설정 
				Content-Transfer-Encoding설정 binary 설정 
			- 파일을 network로 전송하기 위해 Stream객체로 변환 
				InputStream(읽어오는객체) ==> OutputStream 보내는 객체 
				FileInputStream(파일객체) 
				FileCopyUtils.copy(inputstream,outputstream)
				outputstream의 flush를 통해서 자원 해제 
				











ex) 연습예제 
1. 화면 및 DB구조 
	-- content, fname
	REATE TABLE fileexp(
		content varchar2(200),
		fname varchar2(100)
	);
	SELECT * FROM fileexp;
2. sql 작성 
	INSERT INTO fileexp values('파이','pi.jpg')
3. vo 작성 
	public class FileVo{
		private String content;
		private String fname;
	}
4. dao 작성 
	public void insertFile(FileVo ins) 
5. 공통 vo 등록 
6. mapper.xml 
7. service
8. controller 호출 
9. 조회 
			
		
		
		